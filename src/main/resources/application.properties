spring.application.name=springbootdemo

# Turn off the spring boot banner
spring.main.banner-mode=off

# Reduce logging level
logging.level.root=warn

# *(wildcard) Exposes all the endpoints of actuator or just mention specific endpoint you want to expose
management.endpoints.web.exposure.include=*
#management.endpoints.web.exposure.exclude=health,info
management.info.env.enabled=true

info.app.name=Spring Boot Demo App
info.app.description=Spring boot actuator contains 10+ endpoints like /auditevents, /beans, /health(default), /info, /mappings
info.app.reference=https://docs.spring.io/spring-boot/reference/actuator/endpoints.html
info.app.version=1.0.0

# Override default username and generated password for security
spring.security.user.name=admin
spring.security.user.password=admin

# Define custom properties
coach.name=Naveen Kumar
team.name=naveen-ku

# Configure Spring boot server port
server.port=7070

# Set context path of the application. All request should be prefixed with /v1
server.servlet.context-path=/v1

# Connect to the mySQL database - springbootdemo package
#spring.datasource.url=jdbc:mysql://localhost:3306/student_tracker
#spring.datasource.username=spring
#spring.datasource.password=spring

# Connect to the mySQL database - restdbcrud (Only use one at a time)
#spring.datasource.url=jdbc:mysql://localhost:3306/employee_directory
#spring.datasource.username=spring
#spring.datasource.password=spring

# Connect to the mySQL database - springdbmappings (Only use one at a time)
#spring.datasource.url=jdbc:mysql://localhost:3306/hb-01-one-to-one-uni
#spring.datasource.username=spring
#spring.datasource.password=spring

# Connect to the mySQL database - springdbmappings (Only use one at a time)
spring.datasource.url=jdbc:mysql://localhost:3306/hb-03-one-to-many
spring.datasource.username=spring
spring.datasource.password=spring

# Add logging configs to display SQL statements
logging.level.org.hibernate.SQL=TRACE
logging.level.org.hibernate.orm.jdbc.bind=TRACE

# When you run your app, JPA/Hibernate will drop tables then create them (When we use create)
# create - Don't do this on Production databases!!! You don't want to drop your Production data
# Based on the JPA/Hibernate annotations in your Java code
# If you want to create tables once ? and then keep data, use: update However, will ALTER database schema based on latest code updates
# Instead for Production, you should have DBAs run SQL scripts
spring.jpa.hibernate.ddl-auto=update